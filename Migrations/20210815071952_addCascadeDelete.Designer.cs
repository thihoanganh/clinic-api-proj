// <auto-generated />
using System;
using Clinic_Web_Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Clinic_Web_Api.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    [Migration("20210815071952_addCascadeDelete")]
    partial class addCascadeDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Clinic_Web_Api.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .IsFixedLength(false);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LectureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .IsFixedLength(false);

                    b.Property<string>("OriginName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Brand");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.DetailOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int?>("DiscountEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountEventId");

                    b.ToTable("DetailOrder");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.DiscountEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<double?>("MoneyCondition")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DiscountEvent");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .IsFixedLength(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Feeling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SatisfiedPercent")
                        .HasColumnType("float");

                    b.Property<int>("SeminarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeminarId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CateId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .IsFixedLength(false);

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .IsFixedLength(false);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .IsFixedLength(false);

                    b.Property<string>("Sumary")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .IsFixedLength(false);

                    b.HasKey("Id");

                    b.HasIndex("CateId");

                    b.ToTable("Lecture");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.LectureCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .IsFixedLength(false);

                    b.HasKey("Id");

                    b.ToTable("LectureCategory");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.LectureComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .IsFixedLength(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("UserId");

                    b.ToTable("LectureComment");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Bonus")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .IsFixedLength(false);

                    b.HasKey("Id");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.MachineCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .IsFixedLength(false);

                    b.HasKey("Id");

                    b.ToTable("MachineCategory");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfManufacture")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Expiry")
                        .HasColumnType("datetime");

                    b.Property<string>("Illustration")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("illustration");

                    b.Property<string>("Ingredient")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("OriginId")
                        .HasColumnType("int");

                    b.Property<string>("Point")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PresentationFormat")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialWarning")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("TypeOfId")
                        .HasColumnType("int");

                    b.Property<string>("Using")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("OriginId");

                    b.HasIndex("PriceId");

                    b.HasIndex("TypeOfId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Origin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Origin1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Origin");

                    b.HasKey("Id");

                    b.ToTable("Origin");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Allowance")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .IsFixedLength(false);

                    b.Property<long?>("Salary")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<double?>("Price1")
                        .HasColumnType("float")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.PriceMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("PriceMedicine");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.PriceScientificEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ScientificEquipmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScientificEquipmentId");

                    b.ToTable("PriceScientificEquipment");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .IsFixedLength(false);

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalQuestion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("LevelId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<double?>("PriceBuy")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("ReceiptMedicine");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptMedicineIdOrderdetail", b =>
                {
                    b.Property<int>("ReceiptMedicineId")
                        .HasColumnType("int");

                    b.Property<int>("OrderdetailId")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.HasKey("ReceiptMedicineId", "OrderdetailId");

                    b.HasIndex("OrderdetailId");

                    b.ToTable("ReceiptMedicineId_Orderdetail");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptScientificEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<double?>("PriceBuy")
                        .HasColumnType("float");

                    b.Property<int?>("ScientificEquipmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScientificEquipmentId");

                    b.ToTable("ReceiptScientificEquipment");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptScientificEquipmentIdOrderDetail", b =>
                {
                    b.Property<int>("ReceiptScientificEquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.HasKey("ReceiptScientificEquipmentId", "OrderDetailId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("ReceiptScientificEquipmentId_OrderDetail");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .IsFixedLength(false);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ScientificEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Illustration")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("illustration");

                    b.Property<int?>("InventedYear")
                        .HasColumnType("int")
                        .HasColumnName("inventedYear");

                    b.Property<int?>("MachineCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("OriginId")
                        .HasColumnType("int");

                    b.Property<int?>("Priceid")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("MachineCategoryId");

                    b.HasIndex("OriginId");

                    b.HasIndex("Priceid");

                    b.ToTable("ScientificEquipment");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Seminar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .IsFixedLength(false);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Method")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .IsFixedLength(false);

                    b.Property<string>("Place")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .IsFixedLength(false);

                    b.Property<string>("Poster")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .IsFixedLength(false);

                    b.Property<string>("Speaker")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .IsFixedLength(false);

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .IsFixedLength(false);

                    b.HasKey("Id");

                    b.ToTable("Seminar");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.SeminarEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeminarId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .IsFixedLength(false);

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeminarId" }, "IX_SeminarEmail")
                        .IsUnique();

                    b.ToTable("SeminarEmail");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.SeminarRegistation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .IsFixedLength(false);

                    b.Property<string>("Fname")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("FName")
                        .IsFixedLength(false);

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeminarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeminarId");

                    b.ToTable("SeminarRegistation");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .IsFixedLength(false);

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .IsFixedLength(false);

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .IsFixedLength(false);

                    b.Property<DateTime?>("WokingStart")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.TypeOfMedicine", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfMedicine");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FullName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .IsFixedLength(false);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.UserQuiz", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("CorrectAnswer")
                        .HasColumnType("int");

                    b.Property<int?>("NoAnswer")
                        .HasColumnType("int");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.Property<int?>("TotalQuestion")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuiz");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Answer", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Answer_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Attachment", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Lecture", "Lecture")
                        .WithMany("Attachments")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_Attachment_Lecture")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.DetailOrder", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.User", "Customer")
                        .WithMany("DetailOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_DetailOrder_Customer");

                    b.HasOne("Clinic_Web_Api.Models.DiscountEvent", "DiscountEvent")
                        .WithMany("DetailOrders")
                        .HasForeignKey("DiscountEventId");

                    b.Navigation("Customer");

                    b.Navigation("DiscountEvent");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Feedback", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Seminar", "Seminar")
                        .WithMany("Feedbacks")
                        .HasForeignKey("SeminarId")
                        .HasConstraintName("FK_Feedback_Seminar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seminar");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Lecture", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.LectureCategory", "Cate")
                        .WithMany("Lectures")
                        .HasForeignKey("CateId")
                        .HasConstraintName("FK_Lecture_LectureCategory")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cate");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.LectureComment", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Lecture", "Lecture")
                        .WithMany("LectureComments")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_LectureComment_Lecture")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clinic_Web_Api.Models.User", "User")
                        .WithMany("LectureComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LectureComment_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Lecture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Medicine", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Brand", "Brand")
                        .WithMany("Medicines")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Medicine_Brand");

                    b.HasOne("Clinic_Web_Api.Models.Origin", "Origin")
                        .WithMany("Medicines")
                        .HasForeignKey("OriginId")
                        .HasConstraintName("FK_Medicine_Origin");

                    b.HasOne("Clinic_Web_Api.Models.Price", "Price")
                        .WithMany("Medicines")
                        .HasForeignKey("PriceId")
                        .HasConstraintName("FK_Medicine_Price");

                    b.HasOne("Clinic_Web_Api.Models.TypeOfMedicine", "TypeOf")
                        .WithMany("Medicines")
                        .HasForeignKey("TypeOfId")
                        .HasConstraintName("FK_Medicine_TypeOfMedicine");

                    b.Navigation("Brand");

                    b.Navigation("Origin");

                    b.Navigation("Price");

                    b.Navigation("TypeOf");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.PriceMedicine", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Medicine", "Medicine")
                        .WithMany("PriceMedicines")
                        .HasForeignKey("MedicineId")
                        .HasConstraintName("FK_PriceMedicine_Medicine");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.PriceScientificEquipment", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.ScientificEquipment", "ScientificEquipment")
                        .WithMany("PriceScientificEquipments")
                        .HasForeignKey("ScientificEquipmentId")
                        .HasConstraintName("FK_PriceScientificEquipment_ScientificEquipment");

                    b.Navigation("ScientificEquipment");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Question", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK_Question_Quiz");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Quiz", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Lecture", "Lecture")
                        .WithMany("Quizzes")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_Quiz_Lecture")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clinic_Web_Api.Models.Level", "Level")
                        .WithMany("Quizzes")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_Quiz_Level");

                    b.Navigation("Lecture");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptMedicine", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Medicine", "Medicine")
                        .WithMany("ReceiptMedicines")
                        .HasForeignKey("MedicineId")
                        .HasConstraintName("FK_ReceiptMedicine_Medicine");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptMedicineIdOrderdetail", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.DetailOrder", "Orderdetail")
                        .WithMany("ReceiptMedicineIdOrderdetails")
                        .HasForeignKey("OrderdetailId")
                        .HasConstraintName("FK_ReceiptMedicineId_Orderdetail_DetailOrder")
                        .IsRequired();

                    b.HasOne("Clinic_Web_Api.Models.ReceiptMedicine", "ReceiptMedicine")
                        .WithMany("ReceiptMedicineIdOrderdetails")
                        .HasForeignKey("ReceiptMedicineId")
                        .HasConstraintName("FK_ReceiptMedicineId_Orderdetail_ReceiptMedicine")
                        .IsRequired();

                    b.Navigation("Orderdetail");

                    b.Navigation("ReceiptMedicine");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptScientificEquipment", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.ScientificEquipment", "ScientificEquipment")
                        .WithMany("ReceiptScientificEquipments")
                        .HasForeignKey("ScientificEquipmentId")
                        .HasConstraintName("FK_ReceiptScientificEquipment_ScientificEquipment");

                    b.Navigation("ScientificEquipment");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptScientificEquipmentIdOrderDetail", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.DetailOrder", "OrderDetail")
                        .WithMany("ReceiptScientificEquipmentIdOrderDetails")
                        .HasForeignKey("OrderDetailId")
                        .HasConstraintName("FK_ReceiptScientificEquipmentId_OrderDetail_DetailOrder")
                        .IsRequired();

                    b.HasOne("Clinic_Web_Api.Models.ReceiptScientificEquipment", "ReceiptScientificEquipment")
                        .WithMany("ReceiptScientificEquipmentIdOrderDetails")
                        .HasForeignKey("ReceiptScientificEquipmentId")
                        .HasConstraintName("FK_ReceiptScientificEquipmentId_OrderDetail_ReceiptScientificEquipment")
                        .IsRequired();

                    b.Navigation("OrderDetail");

                    b.Navigation("ReceiptScientificEquipment");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ScientificEquipment", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Brand", "Brand")
                        .WithMany("ScientificEquipments")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_ScientificEquipment_Brand");

                    b.HasOne("Clinic_Web_Api.Models.MachineCategory", "MachineCategory")
                        .WithMany("ScientificEquipments")
                        .HasForeignKey("MachineCategoryId")
                        .HasConstraintName("FK_ScientificEquipment_MachineCategory");

                    b.HasOne("Clinic_Web_Api.Models.Origin", "Origin")
                        .WithMany("ScientificEquipments")
                        .HasForeignKey("OriginId")
                        .HasConstraintName("FK_ScientificEquipment_Origin");

                    b.HasOne("Clinic_Web_Api.Models.Price", "Price")
                        .WithMany("ScientificEquipments")
                        .HasForeignKey("Priceid")
                        .HasConstraintName("FK_ScientificEquipment_Price");

                    b.Navigation("Brand");

                    b.Navigation("MachineCategory");

                    b.Navigation("Origin");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Seminar", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.SeminarEmail", "SeminarEmail")
                        .WithOne("Seminar")
                        .HasForeignKey("Clinic_Web_Api.Models.Seminar", "Id")
                        .HasConstraintName("FK_Seminar_SeminarEmail1")
                        .HasPrincipalKey("Clinic_Web_Api.Models.SeminarEmail", "SeminarId")
                        .IsRequired();

                    b.Navigation("SeminarEmail");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.SeminarRegistation", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Seminar", "Seminar")
                        .WithMany("SeminarRegistations")
                        .HasForeignKey("SeminarId")
                        .HasConstraintName("FK_SeminarRegistation_Seminar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seminar");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Staff", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Position", "Position")
                        .WithMany("Staffs")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Staff_Position");

                    b.HasOne("Clinic_Web_Api.Models.Role", "Role")
                        .WithMany("Staffs")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.UserQuiz", b =>
                {
                    b.HasOne("Clinic_Web_Api.Models.Quiz", "Quiz")
                        .WithMany("UserQuiz")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK_UserQuiz_Quiz")
                        .IsRequired();

                    b.HasOne("Clinic_Web_Api.Models.User", "User")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserQuiz_User")
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Brand", b =>
                {
                    b.Navigation("Medicines");

                    b.Navigation("ScientificEquipments");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.DetailOrder", b =>
                {
                    b.Navigation("ReceiptMedicineIdOrderdetails");

                    b.Navigation("ReceiptScientificEquipmentIdOrderDetails");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.DiscountEvent", b =>
                {
                    b.Navigation("DetailOrders");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Lecture", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("LectureComments");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.LectureCategory", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Level", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.MachineCategory", b =>
                {
                    b.Navigation("ScientificEquipments");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Medicine", b =>
                {
                    b.Navigation("PriceMedicines");

                    b.Navigation("ReceiptMedicines");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Origin", b =>
                {
                    b.Navigation("Medicines");

                    b.Navigation("ScientificEquipments");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Position", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Price", b =>
                {
                    b.Navigation("Medicines");

                    b.Navigation("ScientificEquipments");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserQuiz");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptMedicine", b =>
                {
                    b.Navigation("ReceiptMedicineIdOrderdetails");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ReceiptScientificEquipment", b =>
                {
                    b.Navigation("ReceiptScientificEquipmentIdOrderDetails");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Role", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.ScientificEquipment", b =>
                {
                    b.Navigation("PriceScientificEquipments");

                    b.Navigation("ReceiptScientificEquipments");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.Seminar", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("SeminarRegistations");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.SeminarEmail", b =>
                {
                    b.Navigation("Seminar");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.TypeOfMedicine", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Clinic_Web_Api.Models.User", b =>
                {
                    b.Navigation("DetailOrders");

                    b.Navigation("LectureComments");

                    b.Navigation("UserQuizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
